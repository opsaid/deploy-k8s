---

# DANGER! 
# 部署的containerd版本
containerd_version: 1.3.10

# DANGER! 
# 使用的k8s网络插件，支持: calico
calico_version: 3.16.10

# 内部系统镜像地址，必须存在
internal_images:
  namespace: registry.cn-hangzhou.aliyuncs.com/kube-image-repo
  system:
    # key与镜像名一致,中划线以下划线代替,val为镜像版本末尾带具体系统架构

    # gcr.io/etcd-development/etcd:v3.5.1
    etcd: 3.5.1

    # k8s.gcr.io/kube-apiserver-amd64:v1.22.6
    kube_apiserver: "{{ k8s_version }}-amd64"
    kube_controller_manager: "{{ k8s_version }}-amd64"
    kube_scheduler: "{{ k8s_version }}-amd64"
    kube_proxy: "{{ k8s_version }}-amd64"

    # calico/node:v3.16.10
    calico_cni: "{{ calico_version }}-amd64"
    calico_node: "{{ calico_version }}-amd64"
    calico_kube_controllers: "{{ calico_version }}-amd64"

    # gcr.io/k8s-staging-metrics-server/metrics-server:master 
    metrics_server: v0.5.2-amd64

    # k8s.gcr.io/pause:3.2
    pause: 3.5-amd64

    # coredns/coredns:1.8.7
    coredns: 1.8.7-amd64

# etcd
etcd_args:
  advertise_client_urls: "https://{{ ansible_facts[listen_device_name]['ipv4']['address'] }}:2379"
  auto_tls: "false"
  cert_file: "{{ etc_dir }}/pki/etcd/server.crt"
  client_cert_auth: "true"
  data_dir: "{{ data_dir }}/etcd/"
  election_timeout: "1000"
  enable_v2: "false"
  heartbeat_interval: "100"
  initial_advertise_peer_urls: "https://{{ server_name }}:2380"
  initial_cluster: "{% for host in groups['etcd'] %}{{ hostvars[host]['server_name'] }}=https://{{ hostvars[host]['server_name'] }}:2380{% if not loop.last %},{% endif %}{% endfor %}"
  initial_cluster_state: "new"
  initial_cluster_token: "{{ cluster_name }}"
  key_file: "{{ etc_dir }}/pki/etcd/server.key"
  listen_client_urls: "https://127.0.0.1:2379,https://{{ ansible_facts[listen_device_name]['ipv4']['address'] }}:2379"
  listen_metrics_urls: "http://127.0.0.1:2381"
  listen_peer_urls: "https://{{ ansible_facts[listen_device_name]['ipv4']['address'] }}:2380"
  max_request_bytes: "1048576"
  max_snapshots: "5"
  max_wals: "5"
  name: "{{ server_name }}"
  peer_auto_tls: "false"
  peer_cert_file: "{{ etc_dir }}/pki/etcd/peer.crt"
  peer_client_cert_auth: "true"
  peer_key_file: "{{ etc_dir }}/pki/etcd/peer.key"
  peer_trusted_ca_file: "{{ etc_dir }}/pki/etcd/ca.crt"
  quota_backend_bytes: "4294967296"
  snapshot_count: "10000"
  trusted_ca_file: "{{ etc_dir }}/pki/etcd/ca.crt"

# 对应k8s cli，变量由下划线转中划线
api_server_args:
  advertise_address: "{{ ansible_facts[listen_device_name]['ipv4']['address'] }}"
  allow_privileged: "true"
  alsologtostderr: "true"
  anonymous_auth: "true"
  apiserver_count: "{{ groups['control'] | length }}"
  audit_log_maxage: "20"
  audit_log_maxbackup: "10"
  audit_log_maxsize: "1024"
  audit_log_path: "{{ log_dir }}/audit.log"
  audit_policy_file: "{{ etc_dir }}/audit-policy.yaml"
  authorization_mode: "Node,RBAC"
  bind_address: "{{ ansible_facts[listen_device_name]['ipv4']['address'] }}"
  client_ca_file: "{{ etc_dir }}/pki/ca.crt"
  default_not_ready_toleration_seconds: "60"
  default_unreachable_toleration_seconds: "60"
  default_watch_cache_size: "100"
  # 开启的准入控制器
  enable_admission_plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,DefaultIngressClass,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
  enable_aggregator_routing: "false"
  enable_bootstrap_token_auth: "true"
  enable_garbage_collector: "true"
  endpoint_reconciler_type: "lease"
  etcd_cafile: "{{ etc_dir }}/pki/etcd/ca.crt"
  etcd_certfile: "{{ etc_dir }}/pki/apiserver-etcd-client.crt"
  etcd_keyfile: "{{ etc_dir }}/pki/apiserver-etcd-client.key"
  etcd_prefix: "/kubernetes/{{ cluster_domain }}/registry"
  etcd_compaction_interval: "30m"
  etcd_servers: "{% for host in groups['etcd'] %}https://{{ hostvars[host]['server_name'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
  event_ttl: "1h"
  goaway_chance: "0.001"
  kubelet_client_certificate: "{{ etc_dir }}/pki/apiserver-kubelet-client.crt"
  kubelet_client_key: "{{ etc_dir }}/pki/apiserver-kubelet-client.key"
  # 优先使用InternalIP来访问kubelet，这样可以避免节点名称没有DNS解析记录时，通过节点名称调用节点kubeletAPI失败的情况
  kubelet_preferred_address_types: "InternalIP,Hostname"
  livez_grace_period: "5m"
  log_dir: "{{ log_dir }}"
  log_file: "{{ log_dir }}/kube-apiserver.log"
  log_file_max_size: "2048"
  log_flush_frequency: "5s"
  logtostderr: "false"
  proxy_client_cert_file: "{{ etc_dir }}/pki/front-proxy-client.crt"
  proxy_client_key_file: "{{ etc_dir }}/pki/front-proxy-client.key"
  requestheader_allowed_names: "front-proxy-client"
  requestheader_client_ca_file: "{{ etc_dir }}/pki/front-proxy-ca.crt"
  requestheader_extra_headers_prefix: "X-Remote-Extra-"
  requestheader_group_headers: "X-Remote-Group"
  requestheader_username_headers: "X-Remote-User"
  secure_port: "6443"
  service_account_issuer: "https://kubernetes.default.svc.{{ cluster_domain }}"
  service_account_key_file: "{{ etc_dir }}/pki/sa.key"
  service_account_signing_key_file: "/etc/kubernetes/pki/sa.key"
  service_cluster_ip_range: "{{ service_cluster_ip_range }}"
  service_node_port_range: "30000-32767"
  storage_backend: "etcd3"
  tls_cert_file: "{{ etc_dir }}/pki/apiserver.crt"
  tls_private_key_file: "{{ etc_dir }}/pki/apiserver.key"
  token_auth_file: "{{ etc_dir }}/known_tokens.csv"
  v: "0"
  watch_cache: "true"

# kube-controller-manager
controller_manager_args:
  address: "127.0.0.1"
  allocate_node_cidrs: "true"
  alsologtostderr: "true"
  authentication_kubeconfig: "{{ etc_dir }}/controller-manager.conf"
  authentication_skip_lookup: "false"
  authorization_kubeconfig: "{{ etc_dir }}/controller-manager.conf"
  # 服务监听的IP地址，与secure-port配合使用，默认监听0.0.0.0
  bind_address: "{{ ansible_facts[listen_device_name]['ipv4']['address'] }}"
  cidr_allocator_type: "RangeAllocator"
  client_ca_file: "{{ etc_dir }}/pki/ca.crt"
  cluster_cidr: "{{ cluster_cidr }}"
  cluster_name: "{{ cluster_name }}"
  cluster_signing_cert_file: "{{ etc_dir }}/pki/ca.crt"
  experimental_cluster_signing_duration: "43800h0m0s"
  cluster_signing_key_file: "{{ etc_dir }}/pki/ca.key"
  concurrent_deployment_syncs: "5"
  concurrent_endpoint_syncs: "5"
  concurrent_gc_syncs: "20"
  concurrent_namespace_syncs: "10"
  controller_start_interval: "1s"
  controllers: "attachdetach,bootstrapsigner,clusterrole-aggregation,cronjob,csrapproving,csrcleaner,csrsigning,daemonset,deployment,disruption,endpoint,endpointslice,garbagecollector,horizontalpodautoscaling,job,namespace,nodeipam,nodelifecycle,persistentvolume-binder,persistentvolume-expander,podgc,pvc-protection,pv-protection,replicaset,replicationcontroller,resourcequota,root-ca-cert-publisher,route,service,serviceaccount,serviceaccount-token,statefulset,tokencleaner,ttl,ttl-after-finished"
  deployment_controller_sync_period: "30s"
  enable_garbage_collector: "true"
  horizontal_pod_autoscaler_cpu_initialization_period: "5m"
  horizontal_pod_autoscaler_downscale_stabilization: "5m"
  horizontal_pod_autoscaler_initial_readiness_delay: "30s"
  horizontal_pod_autoscaler_sync_period: "30s"
  horizontal_pod_autoscaler_tolerance: "0.1"
  kube_api_burst: "100"
  kube_api_qps: "100"
  kubeconfig: "{{ etc_dir }}/controller-manager.conf"
  log_dir: "{{ log_dir }}"
  log_file: "{{ log_dir }}/kube-controller-manager.log"
  log_file_max_size: "2048"
  log_flush_frequency: "5s"
  logtostderr: "false"
  min_resync_period: "12h0m0s"
  namespace_sync_period: "5m0s"
  node_cidr_mask_size: "{{ node_cidr_mask }}"
  node_eviction_rate: "0.1"
  node_monitor_grace_period: "40s"
  node_monitor_period: "5s"
  node_startup_grace_period: "1m0s"
  pod_eviction_timeout: "5m0s"
  port: "10252"
  requestheader_allowed_names: "front-proxy-client"
  requestheader_client_ca_file: "{{ etc_dir }}/pki/front-proxy-ca.crt"
  requestheader_extra_headers_prefix: "X-Remote-Extra-"
  requestheader_group_headers: "X-Remote-Group"
  requestheader_username_headers: "X-Remote-User"
  resource_quota_sync_period: "5m0s"
  root_ca_file: "{{ etc_dir }}/pki/ca.crt"
  secure_port: "10257"
  service_account_private_key_file: "{{ etc_dir }}/pki/sa.key"
  service_cluster_ip_range: "{{ service_cluster_ip_range }}"
  use_service_account_credentials: "true"
  v: "0"

# kube-scheduler
scheduler_args:
  alsologtostderr: "true"
  authentication_kubeconfig: "{{ etc_dir }}/scheduler.conf"
  authorization_kubeconfig: "{{ etc_dir }}/scheduler.conf"
  # 服务监听的IP地址，与secure-port配合使用，默认监听0.0.0.0
  bind_address: "{{ ansible_facts[listen_device_name]['ipv4']['address'] }}"
  config: "{{ etc_dir }}/scheduler-config.yaml"
  kubeconfig: "{{ etc_dir }}/scheduler.conf"
  log_dir: "{{ log_dir }}"
  log_file: "{{ log_dir }}/kube-scheduler.log"
  log_file_max_size: "2048"
  log_flush_frequency: "5s"
  logtostderr: "false"
  port: "0"
  secure_port: "10259"
  v: "0"
