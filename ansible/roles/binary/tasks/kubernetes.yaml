---

# 创建 kubernetes 二进制存放目录
- name: 创建 kubernetes 二进制存放目录
  file: path={{ item }} mode=0755 state=directory
  with_items:
    - "roles/binary/files/kubernetes/server/bin/"

- stat:
    path: roles/binary/files/kubernetes/server/bin/kubelet
  register: binary_kubelet
- stat:
    path: roles/binary/files/kubernetes/server/bin/kubectl
  register: binary_kubectl 
- stat:
    path: roles/binary/files/kubernetes/server/bin/kubeadm
  register: binary_kubeadm
- stat:
    path: "{{ temp_dir }}/kubernetes.tar.gz"
  register: kubernetes_src

- name: 获取官方relases安装包
  block:
  - name: 下载 kubernetes.tar.gz（不验证sha256值）
    get_url:
      url: https://github.com/kubernetes/kubernetes/releases/download/{{ k8s_version }}/kubernetes.tar.gz
      dest: "{{ temp_dir }}/kubernetes.tar.gz"
    when: (k8s_version_sha256 is not defined) and (kubernetes_src.stat.exists == False)

  - name: 下载 kubernetes.tar.gz（需要验证sha256值）
    get_url:
      url: https://github.com/kubernetes/kubernetes/releases/download/{{ k8s_version }}/kubernetes.tar.gz
      dest: "{{ temp_dir }}/kubernetes.tar.gz"
      checksum: sha256:{{ k8s_version_sha256 }}
    when: (k8s_version_sha256 is defined) and (kubernetes_src.stat.exists == False)

  - name: 解压 {{ temp_dir }}/kubernetes.tar.gz 至 {{ temp_dir }}
    unarchive:
      src: "{{ temp_dir }}/kubernetes.tar.gz"
      dest: "{{ temp_dir }}"

  - name: 执行 ./cluster/get-kube-binaries.sh 下载二进制文件（依赖网络，速度可能较慢）
    command: ./cluster/get-kube-binaries.sh
    args:
      chdir: "{{ temp_dir }}/kubernetes"
    environment:
      KUBERNETES_SKIP_CONFIRM: true
      KUBERNETES_CLIENT_OS: linux
      KUBERNETES_SERVER_ARCH: amd64

  - name: 解压 kubernetes-server-linux-amd64.tar.gz
    unarchive:
      src: "{{ temp_dir }}/kubernetes/server/kubernetes-server-linux-amd64.tar.gz"
      dest:  "{{ temp_dir }}"

  - name: 解压 kubernetes-client-linux-amd64.tar.gz
    unarchive:
      src: "{{ temp_dir }}/kubernetes/client/kubernetes-client-linux-amd64.tar.gz"
      dest:  "{{ temp_dir }}"

  - name: 拷贝 kubeadm 二进制文件
    copy:
      src: "{{ temp_dir }}/kubernetes/server/bin/{{ item }}"
      dest: roles/binary/files/kubernetes/server/bin/{{ item }}
      mode: 0755
    with_items:
      - kubeadm
      - kubelet
      - kubectl
  when: (binary_kubelet.stat.exists == False) and (binary_kubectl.stat.exists == False) and (binary_kubeadm.stat.exists == False)

# TODO; 如有更好的方法，尽量不使用shell模块
- name: 构建官方镜像
  block:
  - name: 导入官方镜像
    command: docker load -i {{ item }}
    args:
      chdir: "{{ temp_dir }}/kubernetes/server/bin"
    with_items:
      - kube-apiserver.tar
      - kube-controller-manager.tar
      - kube-proxy.tar
      - kube-scheduler.tar

  - name: 获取 kube-apiserver 镜像ID
    shell: docker images | grep k8s.gcr.io/kube-apiserver | grep {{ k8s_version }} | awk '{ print $3 }'
    register: imgid_apiserver
  - name: 获取 kube-controller-manager 镜像ID
    shell: docker images | grep k8s.gcr.io/kube-controller-manager | grep {{ k8s_version }} | awk '{ print $3 }'
    register: imgid_controller
  - name: 获取 kube-proxy 镜像ID
    shell: docker images | grep k8s.gcr.io/kube-proxy | grep {{ k8s_version }} | awk '{ print $3 }'
    register: imgid_proxy
  - name: 获取 kube-scheduler 镜像ID
    shell: docker images | grep k8s.gcr.io/kube-scheduler | grep {{ k8s_version }} | awk '{ print $3 }'
    register: imgid_scheduler

  #- name: docker push test
  #  debug:
  #    msg: "{{ imgid_apiserver.stdout }}"

  - name: 更改 kube-apiserver 镜像名
    command: docker tag {{ imgid_apiserver.stdout }} {{ internal_images.namespace }}/kube-apiserver:{{ internal_images.system.kube_apiserver }}
  - name: 更改 kube-controller-manager 镜像名
    command: docker tag {{ imgid_controller.stdout }} {{ internal_images.namespace }}/kube-controller-manager:{{ internal_images.system.kube_apiserver }}
  - name: 更改 kube-proxy 镜像名
    command: docker tag {{ imgid_proxy.stdout }} {{ internal_images.namespace }}/kube-proxy:{{ internal_images.system.kube_apiserver }}
  - name: 更改 kube-scheduler 镜像名
    command: docker tag {{ imgid_scheduler.stdout }} {{ internal_images.namespace }}/kube-scheduler:{{ internal_images.system.kube_apiserver }}

  # TODO; 前提需要有docker repos的权限
  - name: 上传镜像：{{ internal_images.namespace }}/kube-apiserver:{{ internal_images.system.kube_apiserver }}
    command: docker push {{ internal_images.namespace }}/kube-apiserver:{{ internal_images.system.kube_apiserver }}
  - name: 上传镜像：{{ internal_images.namespace }}/kube-controller-manager:{{ internal_images.system.kube_apiserver }}
    command: docker push {{ internal_images.namespace }}/kube-controller-manager:{{ internal_images.system.kube_apiserver }}
  - name: 上传镜像：{{ internal_images.namespace }}/kube-proxy:{{ internal_images.system.kube_apiserver }}
    command: docker push {{ internal_images.namespace }}/kube-proxy:{{ internal_images.system.kube_apiserver }}
  - name: 上传镜像：{{ internal_images.namespace }}/kube-scheduler:{{ internal_images.system.kube_apiserver }}
    command: docker push {{ internal_images.namespace }}/kube-scheduler:{{ internal_images.system.kube_apiserver }}
  when: (binary_kubelet.stat.exists == False) and (binary_kubectl.stat.exists == False) and (binary_kubeadm.stat.exists == False)

- name: 清理缓存文件
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ temp_dir }}/kubernetes"
    - "{{ temp_dir }}/kubernetes.tar.gz"
  # kubelet kubectl kubeadm是拷贝文件前检测，所以这里做不存在判断 
  when: (binary_kubelet.stat.exists == False) and (binary_kubectl.stat.exists == False) and (binary_kubeadm.stat.exists == False)
