---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
      # Used to discover Typhas.
      - get
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
      # Calico stores some configuration information in node annotations.
      - update
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
  # Used by Calico for policy information.
  - apiGroups: [""]
    resources:
      - pods
      - namespaces
      - serviceaccounts
    verbs:
      - list
      - watch
  # The CNI plugin patches pods/status.
  - apiGroups: [""]
    resources:
      - pods/status
    verbs:
      - patch
  # Calico monitors various CRDs for config.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - globalfelixconfigs
      - felixconfigurations
      - bgppeers
      - globalbgpconfigs
      - bgpconfigurations
      - ippools
      - ipamblocks
      - globalnetworkpolicies
      - globalnetworksets
      - networkpolicies
      - networksets
      - clusterinformations
      - hostendpoints
      - blockaffinities
      - kubecontrollersconfigurations
    verbs:
      - get
      - list
      - watch
  # Calico must create and update some CRDs on startup.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - ippools
      - felixconfigurations
      - clusterinformations
    verbs:
      - create
      - update
  # Calico stores some configuration information on the node.
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  # These permissions are only required for upgrade from v2.6, and can
  # be removed after upgrade or on fresh installations.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - bgpconfigurations
      - bgppeers
    verbs:
      - create
      - update
  # These permissions are required for Calico CNI to perform IPAM allocations.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - blockaffinities
      - ipamblocks
      - ipamhandles
    verbs:
      - get
      - list
      - create
      - update
      - delete
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - ipamconfigs
    verbs:
      - get
  # Block affinities must also be watchable by confd for route aggregation.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - blockaffinities
    verbs:
      - watch
  # The Calico IPAM migration needs to get daemonsets. These permissions can be
  # removed if not upgrading from an installation using host-local IPAM.
  - apiGroups: ["apps"]
    resources:
      - daemonsets
    verbs:
      - get

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Nodes are watched to monitor for deletions.
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - watch
      - list
      - get
  # Pods are queried to check for existence.
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
  # IPAM resources are manipulated when nodes are deleted.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - ippools
    verbs:
      - list
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - blockaffinities
      - ipamblocks
      - ipamhandles
    verbs:
      - get
      - list
      - create
      - update
      - delete
  # kube-controllers manages hostendpoints.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - hostendpoints
    verbs:
      - get
      - list
      - create
      - update
      - delete
  # Needs access to update clusterinformations.
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - clusterinformations
    verbs:
      - get
      - create
      - update
  # KubeControllersConfiguration is where it gets its config
  - apiGroups: ["crd.projectcalico.org"]
    resources:
      - kubecontrollersconfigurations
    verbs:
      # read its own config
      - get
      # create a default if none exists
      - create
      # update status
      - update
      # watch for changes
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # 在datastore为k8s下缓存数据，降低压力，一般在50主机节点上在开启
  typha_service_name: "none"
  # 固定使用bird，不用vxlan
  calico_backend: "bird"
  # 设置mtu，不做任何封装使用默认值如1500(vxlan=mtu - 50、ipip=mtu - 20)
  veth_mtu: "1500"

  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "log_file_path": "{{ log_dir }}/cni.log",
          "datastore_type": "kubernetes",
          "nodename": "__KUBERNETES_NODE_NAME__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  labels:
    app.kubernetes.io/name: calico-node
  name: calico-node
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
      serviceAccountName: calico-node
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
      # 为宿主安装cni插件
      - name: install-cni
        image: {{ internal_images.namespace }}/{{ internal_images.calico.cni }}
        command: ["/opt/cni/bin/install"]
        envFrom:
        - configMapRef:
            # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
            name: kubernetes-services-endpoint
            optional: true
        env:
        # Skip tls verify in /etc/cni/net.d/calico-kubeconfig
        - name: SKIP_TLS_VERIFY
          value: "true"
        # Name of the CNI config file to create.
        - name: CNI_CONF_NAME
          value: "10-calico.conflist"
        # The CNI network config to install on each node.
        - name: CNI_NETWORK_CONFIG
          valueFrom:
            configMapKeyRef:
              name: calico-config
              key: cni_network_config
        # Set the hostname based on the k8s node name.
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # CNI MTU Config variable
        - name: CNI_MTU
          valueFrom:
            configMapKeyRef:
              name: calico-config
              key: veth_mtu
        # Prevents the container from sleeping forever.
        - name: SLEEP
          value: "false"
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cni-bin-dir
        - mountPath: /host/etc/cni/net.d
          name: cni-net-dir
        securityContext:
          privileged: true
      containers:
      - name: calico-node
        image: {{ internal_images.namespace }}/{{ internal_images.calico.node }}
        envFrom:
        - configMapRef:
            # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
            name: kubernetes-services-endpoint
            optional: true
        env:
        # Use Kubernetes API as the backing datastore.
        - name: DATASTORE_TYPE
          value: "kubernetes"
        # 等待datastore可用后在继续
        - name: WAIT_FOR_DATASTORE
          value: "true"
        # Set based on the k8s node name.
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Choose the backend to use.
        - name: CALICO_NETWORKING_BACKEND
          valueFrom:
            configMapKeyRef:
              name: calico-config
              key: calico_backend
        # 在datastore使用k8s下会在末尾自动添加kdd
        # 用于crd clusterinformations的数据验证
        - name: CLUSTER_TYPE
          value: "k8s,bgp"
        # 作为主机上calico的下一跳IPv4地址，既bgp.ipv4Address值
        # 每个节点不同，这里设置为选择指定网卡名（不能包含多IP）
        - name: IP
          value: "autodetect"
        - name: IP_AUTODETECTION_METHOD
          value: "interface={{ listen_device_name }}"
        # 禁用IPIP
        - name: CALICO_IPV4POOL_IPIP
          value: "Never"
        # 禁用VXLAN
        - name: CALICO_IPV4POOL_VXLAN
          value: "Never"
        # 默认创建的IPv4地址池，需等于集群参数--cluster-cidr
        - name: CALICO_IPV4POOL_CIDR
          value: "{{ cluster_cidr }}"
        - name: CALICO_IPV4POOL_BLOCK_SIZE
          value: "{{ node_cidr_mask }}"
        # 禁用对ipv6的支持
        - name: FELIX_IPV6SUPPORT
          value: "false"
        # 日志相关
        - name: FELIX_LOGSEVERITYSCREEN
          value: "info"
        - name: CALICO_DISABLE_FILE_LOGGING
          value: "true"
        # 开启http健康检测服务，calico-node -felix-live探测依赖
        - name: FELIX_HEALTHENABLED
          value: "true"
        - name: FELIX_PROMETHEUSPROCESSMETRICSENABLED
          value: "true"
        - name: FELIX_PROMETHEUSMETRICSHOST
          value: "0.0.0.0"
        - name: FELIX_PROMETHEUSMETRICSPORT
          value: "9091"
        # TODO; 无条件接受来自工作负载的数据包
        - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
          value: "ACCEPT"

        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - /bin/calico-node
            - -felix-live
            - -bird-live
          periodSeconds: 10
          initialDelaySeconds: 10
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/calico-node
            - -felix-ready
            - -bird-ready
          periodSeconds: 10
        volumeMounts:
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
          readOnly: false
        - mountPath: /var/run/calico
          name: var-run-calico
          readOnly: false
        - mountPath: /var/lib/calico
          name: var-lib-calico
          readOnly: false
        - name: policysync
          mountPath: /var/run/nodeagent
        # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
        # parent directory.
        - name: sysfs
          mountPath: /sys/fs/
          # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
          # If the host is known to mount that filesystem already then Bidirectional can be omitted.
          mountPropagation: Bidirectional
      volumes:
      # Used by calico-node.
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: var-run-calico
        hostPath:
          path: /var/run/calico
      - name: var-lib-calico
        hostPath:
          path: /var/lib/calico
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      - name: sysfs
        hostPath:
          path: /sys/fs/
          type: DirectoryOrCreate
      # Used to install CNI.
      - name: cni-bin-dir
        hostPath:
          path: /opt/cni/bin
      - name: cni-net-dir
        hostPath:
          path: /etc/cni/net.d
        # Mount in the directory for host-local IPAM allocations. This is
        # used when upgrading from host-local to calico-ipam, and can be removed
        # if not using the upgrade-ipam init container.
      - name: host-local-net-dir
        hostPath:
          path: /var/lib/cni/networks
      # Used to create per-pod Unix Domain Sockets
      - name: policysync
        hostPath:
          type: DirectoryOrCreate
          path: /var/run/nodeagent
      # Used to install Flex Volume Driver
      - name: flexvol-driver-host
        hostPath:
          type: DirectoryOrCreate
          path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    app.kubernetes.io/name: calico-kube-controllers
spec:
  # 控制器全局只能开启1个副本
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        app.kubernetes.io/name: calico-kube-controllers
    spec:
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      containers:
      - name: calico-kube-controllers
        image: {{ internal_images.namespace }}/{{ internal_images.calico.controller }}
        env:
        - name: DATASTORE_TYPE
          value: kubernetes
        # 在使用datastore为k8s下，只要开启node控制器
        - name: ENABLED_CONTROLLERS
          value: node
        readinessProbe:
          exec:
            command:
            - /usr/bin/check-status
            - -r
      nodeSelector:
        kubernetes.io/os: linux
{% if system_service_in_control_node %}
        node-role.kubernetes.io/master: ""
{% endif %}
