apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: {{ apiserver_haip }}:{{ apiserver_port }}
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
{% for key, value in api_server_args.items() %}
    - --{{ key | replace('_','-') }}={{ value }}
{% endfor %}
{% if (oidc_issuer_url is defined) and (oidc_client_id is defined) %}
    - --oidc-issuer-url={{ oidc_issuer_url }}
    - --oidc-client-id={{ oidc_client_id }}
{% if oidc_ca_file is defined %}
    - --oidc-ca-file={{ oidc_ca_file }}
{% endif %}
    - --oidc-username-claim={{ oidc_username_claim }}
    - --oidc-groups-claim={{ oidc_groups_claim }}
{% endif %}
    image: {{ internal_images.namespace }}/kube-apiserver:{{ internal_images.system.kube_apiserver }}
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 8
      httpGet:
        host: {{ ansible_facts[listen_device_name]['ipv4']['address'] }}
        path: /livez
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    name: kube-apiserver
    readinessProbe:
      failureThreshold: 3
      httpGet:
        host: {{ ansible_facts[listen_device_name]['ipv4']['address'] }}
        path: /readyz
        port: 6443
        scheme: HTTPS
      periodSeconds: 1
      timeoutSeconds: 15
    resources:
      requests:
        cpu: 250m
    startupProbe:
      failureThreshold: 24
      httpGet:
        host: {{ ansible_facts[listen_device_name]['ipv4']['address'] }}
        path: /livez
        port: 6443
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 15
    volumeMounts:
    - mountPath: /etc/kubernetes/audit-policy.yaml
      name: auditconfig
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /etc/pki
      name: etc-pki
      readOnly: true
    - mountPath: /etc/kubernetes/pki
      name: k8s-certs
      readOnly: true
    - mountPath: /var/log/kubernetes
      name: k8s-logs
    - mountPath: /etc/kubernetes/known_tokens.csv
      name: tokenconfig
      readOnly: true
  hostNetwork: true
  priorityClassName: system-node-critical
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  volumes:
  - hostPath:
      path: /etc/kubernetes/audit-policy.yaml
      type: File
    name: auditconfig
  - hostPath:
      path: /etc/ssl/certs
      type: DirectoryOrCreate
    name: ca-certs
  - hostPath:
      path: /etc/pki
      type: DirectoryOrCreate
    name: etc-pki
  - hostPath:
      path: /etc/kubernetes/pki
      type: DirectoryOrCreate
    name: k8s-certs
  - hostPath:
      path: /var/log/kubernetes
      type: DirectoryOrCreate
    name: k8s-logs
  - hostPath:
      path: /etc/kubernetes/known_tokens.csv
      type: File
    name: tokenconfig
status: {}
